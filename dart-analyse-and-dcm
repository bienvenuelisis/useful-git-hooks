#!/bin/bash

# Function to compare two semver versions
compare_versions() {
    local v1=$1 v2=$2
    local IFS=.
    local i
    local -a v1_parts=($v1) v2_parts=($v2)
    for ((i=0; i<${#v1_parts[@]}; i++)); do
        [[ ${v1_parts[i]} -lt ${v2_parts[i]} ]] && return 1
        [[ ${v1_parts[i]} -gt ${v2_parts[i]} ]] && return 0
    done
    return 0
}

# Get the staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Filter for Dart files and pubspec.yaml
DART_FILES=$(echo "$STAGED_FILES" | grep -E "\.dart$|\.yaml$")

# If no relevant files are found, exit
if [ -z "$DART_FILES" ]; then
    echo "üí§ No Dart or Yaml files found in the staging area. Skipping analysis."
    exit 0
fi

# Check if Dart is installed
if ! command -v dart &> /dev/null
then
    echo "‚ùå Dart is not installed. Please install Dart to proceed."
    exit 1
fi

# Check if the dcm CLI tool is installed
if ! command -v dcm &> /dev/null
then
    echo "‚ùå dcm CLI tool is not installed. Please install it to proceed."
    exit 1
fi

# Check minimum dcm version
if [ ! -f versions.txt ]; then
    echo "‚ùå versions.txt file not found in the repository root. Please add it with the minimum_dcm_version."
    exit 1
fi

MIN_DCM_VERSION=$(grep '^minimum_dcm_version=' versions.txt | cut -d'=' -f2)

if [ -z "$MIN_DCM_VERSION" ]; then
    echo "‚ùå Minimum dcm version not specified in versions.txt."
    exit 1
fi

# Determine the platform and use the appropriate grep command
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    DCM_VERSION=$(dcm --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
else
    # Other Unix-like systems
    DCM_VERSION=$(dcm --version | grep -oP '\d+\.\d+\.\d+')
fi

if ! compare_versions $DCM_VERSION $MIN_DCM_VERSION; then
    echo "‚ùå DCM version $DCM_VERSION is less than the required minimum version $MIN_DCM_VERSION."
    exit 1
fi

# Run Dart analysis
echo "‚åõÔ∏è Running \"dart analyze --fatal-infos\"..."
dart analyze --fatal-infos
DART_ANALYSIS_EXIT_CODE=$?

# Run DCM analysis
echo "‚åõÔ∏è Running \"dcm analyze --fatal-style --fatal-performance ./\"..."
dcm analyze --fatal-style --fatal-performance ./
DCM_ANALYSIS_EXIT_CODE=$?

# Check the exit codes of both analyses and provide detailed error messages
if [ $DART_ANALYSIS_EXIT_CODE -ne 0 ]; then
    echo "‚ùå Dart analysis failed."
else
	echo "‚úÖ Dart analysis passed."
fi

if [ $DCM_ANALYSIS_EXIT_CODE -ne 0 ]; then
    echo "‚ùå DCM analysis failed."
else
	echo "‚úÖ DCM analysis passed."
fi

# If either analysis failed, exit with an error code
if [ $DART_ANALYSIS_EXIT_CODE -ne 0 ] || [ $DCM_ANALYSIS_EXIT_CODE -ne 0 ]; then
    echo "‚ùå One or both analyses failed. Please fix the issues and try committing again."
    exit 1
fi

# If everything passed, allow the commit
echo "‚úÖ All analyses passed. Commit is allowed."
exit 0